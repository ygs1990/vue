<template>
  <div class="content">
    <el-form :model="ins" :rules="formRules" ref="newIns" label-width="120px">
      <el-row>
        <el-col :sm="23" :md="{span: 10, offset: 1}">
          <el-form-item label="通道机构编号：" prop="code">
            <el-input v-model.trim="ins.code" placeholder="必填" style="width: 100%" @blur="checkDuplicate(ins.code)">
            </el-input>
          </el-form-item>
        </el-col>

        <el-col :sm="23" :md="{span: 10, offset: 2}">
          <el-form-item label="通道机构名称：" prop="name">
            <el-input v-model.trim="ins.name" placeholder="必填" @blur="checkDuplicate(ins.name)"></el-input>
          </el-form-item>
        </el-col>
      </el-row>

      <el-row>
        <el-col :sm="23" :md="{span: 10, offset: 1}">
          <el-form-item label="所属通道：" prop="channel">
            <el-select v-model.trim="ins.channel" filterable clearable placeholder="必填" style="width: 100%">
              <el-option v-for="channel in channelList" :label="channel.name +'--'+ channel.code" :value="channel.id | stringNumber" :key="channel.id"></el-option>
            </el-select>
          </el-form-item>
        </el-col>
      </el-row>

      <el-row>
        <el-col :sm="23" :md="{span: 23, offset: 1}">
          <el-form-item label="产品类型：">
            <el-checkbox-group v-model="checkedTypes">
              <el-checkbox v-for="(type, index) in businessList" :label="type.code" :key="type.code" @change="selectType($event, type.code, index)"></el-checkbox>
            </el-checkbox-group>
          </el-form-item>
        </el-col>
      </el-row>

      <el-tabs v-model="activeName" type="border-card" class="mb20" v-if="checkedTypes.length" @tab-click="updateData">
        <el-tab-pane v-for="(tab, index) in tabName" :label="tab" :key="tab" :name="tab">
          <el-row>
            <el-col>
              <el-form-item label="交易权限：">
                <el-checkbox-group v-model="selectedPerm">
                  <el-checkbox v-for="(perm, index) in permList" :label="perm.code" :key="perm.code" @change="permChange(perm, index, $event)">{{perm.name}}</el-checkbox>
                </el-checkbox-group>
              </el-form-item>
            </el-col>
          </el-row>

          <div v-show="activeName === 'POSP'">
            <el-row>
              <el-col :sm="24" :md="{span: 7}">
                <el-form-item label="收单银行：">
                  <el-select v-model.trim="ins.bankCode" filterable clearable placeholder="必填" style="width: 100%">
                    <el-option v-for="bank in bankList"
                               :label="bank.bankName +'--'+ bank.bankCode"
                               :value="bank.bankCode"
                               :key="bank.bankCode">
                    </el-option>
                  </el-select>
                </el-form-item>
              </el-col>
            </el-row>

            <el-table :data="insFee.POSP" border style="width:100%">
              <el-table-column label="交易类型" prop="txCode" align="center">
                <template scope="scope">
                  <el-input type="hidden" v-model="scope.row.txCode"></el-input>
                  <span>{{scope.row.txName}}</span>
                </template>
              </el-table-column>

              <el-table-column label="卡类型" prop="cardType" align="center">
                <template scope="scope">
                  <el-input type="hidden" v-model="scope.row.cardType"></el-input>
                  <span>{{scope.row.cardTypeName}}</span>
                </template>
              </el-table-column>

              <el-table-column label="扣率类型" prop="feeType" align="center">
                <template scope="scope">
                  <el-select v-model="scope.row.feeType" @change="typeChange(scope.row)">
                    <el-option label="比例" value="1"></el-option>
                    <el-option label="固定值" value="2"></el-option>
                    <el-option label="比例加固定封顶" value="3"></el-option>
                  </el-select>
                </template>
              </el-table-column>

              <el-table-column label="扣率值(%)" prop="feeRateTemp" align="center">
                <template scope="scope">
                  <!--<el-row :gutter="15">-->
                  <!--<el-col>-->
                  <el-input v-model.trim="scope.row.feeRateTemp"
                            :placeholder="scope.row.feeType === '2' ? '' : '必填'"
                            :disabled="scope.row.feeType === '2'" @blur="checkRate(scope.row.feeRateTemp, 'POSP')">
                  </el-input>
                  <!--</el-col>-->
                  <!--</el-row>-->
                </template>
              </el-table-column>

              <el-table-column label="封顶值(元)" prop="feeFixedTemp" align="center">
                <template scope="scope">
                  <!--<el-row :gutter="15">-->
                  <!--<el-col>-->
                  <el-input v-model.trim="scope.row.feeFixedTemp"
                            :placeholder="scope.row.feeType === '1' ? '' : '必填'"
                            :disabled="scope.row.feeType === '1'" @blur="checkFixed(scope.row.feeFixedTemp, 'POSP', '封顶值')">
                  </el-input>
                  <!--</el-col>-->
                  <!--</el-row>-->
                </template>
              </el-table-column>

              <el-table-column label="状态" prop="status" align="center">
                <template scope="scope">
                  <el-select v-model="scope.row.status" style="text-align: center">
                    <el-option label="关闭" value="0"></el-option>
                    <el-option label="启用" value="1"></el-option>
                  </el-select>
                </template>
              </el-table-column>
            </el-table>
          </div>

          <div v-show="activeName === 'PAY'">
            <el-table :data="insFee.PAY" border style="width: 100%">
              <el-table-column label="交易类型" prop="txCode" align="center" width="100">
                <template scope="scope">
                  <el-input type="hidden" v-model="scope.row.txCode"></el-input>
                  <span>{{scope.row.txName}}</span>
                </template>
              </el-table-column>

              <el-table-column label="卡类型" prop="cardType" align="center" width="100">
                <template scope="scope">
                  <el-input type="hidden" v-model="scope.row.cardType"></el-input>
                  <span>{{scope.row.cardTypeName}}</span>
                </template>
              </el-table-column>

              <el-table-column label="扣率类型" prop="feeType" align="center" width="180">
                <template scope="scope">
                  <el-select v-model="scope.row.feeType" @change="feeTypeChange(scope.row)">
                    <el-option label="单笔固定" value="2"></el-option>
                    <el-option label="金额阶梯固定" value="4"></el-option>
                  </el-select>
                </template>
              </el-table-column>

              <el-table-column label="扣率值" prop="feeFixedTemp" align="center" width="550">
                <template scope="scope">
                  <el-row v-show="!scope.row.rateList.length">
                    <el-form-item label="固定手续费(元)：" class="mb0">
                      <el-input v-model.trim="scope.row.feeFixedTemp" placeholder="必填"
                                @blur="checkFixed(scope.row.feeFixedTemp, 'PAY', '固定手续费')">
                      </el-input>
                    </el-form-item>
                  </el-row>

                  <el-row :gutter="15"  v-for="(rate, index) in scope.row.rateList" :key="index">
                    <el-col :span="9">
                      <el-form-item label="金额(元)：" class="mv5" labelWidth="80px">
                        <el-input v-model.trim="rate.amount" class="fee-width"
                                  :placeholder="index === scope.row.rateList.length - 1 ? '' : '必填'"
                                  :disabled="index === scope.row.rateList.length - 1"
                                  @blur="checkFixed(rate.amount, 'PAY', '金额')">
                        </el-input>
                      </el-form-item>
                    </el-col>

                    <el-col :span="11">
                      <el-form-item label="固定手续费(元)：" class="mv5">
                        <el-input v-model.trim="rate.fee" class="fee-width" placeholder="必填" @blur="checkFixed(rate.fee, 'PAY', '固定手续费')"></el-input>
                      </el-form-item>
                    </el-col>

                    <el-col :span="3">
                      <el-button class="venter" v-if="index === 0" size="small" @click="rateIncrease(scope.row)" icon="plus">添加</el-button>
                      <el-button class="venter" v-if="index > 0" size="small" @click="rateDelete(scope.row, index)" icon="delete">删除</el-button>
                    </el-col>
                  </el-row>
                </template>
              </el-table-column>

              <el-table-column label="品牌费" align="center" width="250">
                <template scope="scope">
                  <el-form-item label="扣率值(%)：" class="mv5" labelWidth="100px">
                    <el-input v-model.trim="scope.row.brandRate"
                              :placeholder="scope.row.cardType === 1 ? '' : '必填'"
                              :disabled="scope.row.cardType === 1"
                              @blur="checkRate(scope.row.brandRate, 'PAY')">
                    </el-input>
                  </el-form-item>

                  <el-form-item label="封顶值(元)：" class="mv5" labelWidth="100px">
                    <el-input v-model.trim="scope.row.brandFixed"
                              :placeholder="scope.row.cardType === 1 ? '' : '必填'"
                              :disabled="scope.row.cardType === 1"
                              @blur="checkFixed(scope.row.brandFixed, 'PAY', '封顶值')">
                    </el-input>
                  </el-form-item>
                </template>
              </el-table-column>

              <el-table-column label="支持银行" prop="supportBank" align="center" min-width="250">
                <template scope="scope">
                  <el-select v-model.trim="scope.row.supportBank" multiple filterable
                             @visible-change="editUnable(scope.row)" placeholder="请输入关键字">
                    <el-option
                      v-for="bank in banks"
                      :key="bank.bankCode"
                      :label="bank.bankName +'--'+ bank.bankCode"
                      :value="bank.bankCode">
                    </el-option>
                  </el-select>
                </template>
              </el-table-column>

              <el-table-column label="状态" prop="status" align="center" min-width="150">
                <template scope="scope">
                  <el-select v-model="scope.row.status">
                    <el-option label="关闭" value="0"></el-option>
                    <el-option label="启用" value="1"></el-option>
                  </el-select>
                </template>
              </el-table-column>
            </el-table>
          </div>

          <div v-show="activeName === 'WECHAT_PAY'">
            <el-table :data="insFee.WECHAT_PAY" border style="width: 100%">
              <el-table-column label="交易类型" prop="txCode" align="center">
                <template scope="scope">
                  <el-input type="hidden" v-model="scope.row.txCode"></el-input>
                  <span>{{scope.row.txName}}</span>
                </template>
              </el-table-column>

              <el-table-column label="扣率类型" prop="feeType" align="center">
                <template scope="scope">
                  <el-select v-model="scope.row.feeType">
                    <el-option label="比例" value="1"></el-option>
                  </el-select>
                </template>
              </el-table-column>

              <el-table-column label="扣率值(%)" prop="feeRateTemp" align="center">
                <template scope="scope">
                  <el-input v-model.trim="scope.row.feeRateTemp" placeholder="必填"
                            @blur="checkRate(scope.row.feeRateTemp, 'WECHAT_PAY')">
                  </el-input>
                </template>
              </el-table-column>

              <el-table-column label="状态" prop="status" align="center">
                <template scope="scope">
                  <el-select v-model="scope.row.status">
                    <el-option label="关闭" value="0"></el-option>
                    <el-option label="启用" value="1"></el-option>
                  </el-select>
                </template>
              </el-table-column>
            </el-table>
          </div>

          <div v-show="activeName === 'ALI_PAY'">
            <el-table :data="insFee.ALI_PAY" border style="width: 100%">
              <el-table-column label="交易类型" prop="txCode" align="center">
                <template scope="scope">
                  <el-input type="hidden" v-model="scope.row.txCode"></el-input>
                  <span>{{scope.row.txName}}</span>
                </template>
              </el-table-column>

              <el-table-column label="扣率类型" prop="feeType" align="center">
                <template scope="scope">
                  <el-select v-model="scope.row.feeType">
                    <el-option label="比例" value="1"></el-option>
                  </el-select>
                </template>
              </el-table-column>

              <el-table-column label="扣率值(%)" prop="feeRateTemp" align="center">
                <template scope="scope">
                  <el-input v-model.trim="scope.row.feeRateTemp" placeholder="必填"
                            @blur="checkRate(scope.row.feeRateTemp, 'ALI_PAY')">
                  </el-input>
                </template>
              </el-table-column>

              <el-table-column label="状态" prop="status" align="center">
                <template scope="scope">
                  <el-select v-model="scope.row.status">
                    <el-option label="关闭" value="0"></el-option>
                    <el-option label="启用" value="1"></el-option>
                  </el-select>
                </template>
              </el-table-column>
            </el-table>
          </div>

          <div v-show="activeName === 'VERIFY'">
            <el-table :data="insFee.VERIFY" border style="width: 100%">
              <el-table-column label="交易类型" prop="txCode" align="center" width="200">
                <template scope="scope">
                  <el-input type="hidden" v-model="scope.row.txCode"></el-input>
                  <span>{{scope.row.txName}}</span>
                </template>
              </el-table-column>

              <el-table-column label="卡类型" prop="cardType" align="center">
                <template scope="scope" v-if="scope.row.txCode > '005002'">
                  <el-input type="hidden" v-model="scope.row.cardType"></el-input>
                  <span>{{scope.row.cardTypeName}}</span>
                </template>
              </el-table-column>

              <el-table-column label="扣率类型" prop="feeType" align="center" width="250">
                <template scope="scope">
                  <el-select v-model="scope.row.feeType" @change="feeTypeChange(scope.row)">
                    <el-option label="单笔固定" value="2"></el-option>
                    <el-option label="笔数阶梯固定（月）" value="6"></el-option>
                    <el-option label="笔数阶梯固定（年）" value="8"></el-option>
                  </el-select>
                </template>
              </el-table-column>

              <el-table-column label="手续费" prop="feeFixedTemp" align="center" width="550">
                <template scope="scope">
                  <el-row v-show="!scope.row.rateList.length">
                    <el-form-item label="固定手续费(元)：" class="mb0">
                      <el-input v-model.trim="scope.row.feeFixedTemp" placeholder="必填"
                                @blur="checkFixed(scope.row.feeFixedTemp, 'VERIFY', '固定手续费')">
                      </el-input>
                    </el-form-item>
                  </el-row>

                  <el-row :gutter="15"  v-for="(rate, index) in scope.row.rateList" :key="index">
                    <el-col :span="9">
                      <el-form-item label="笔数(笔)：" class="mv5" labelWidth="80px">
                        <el-input v-model.trim="rate.amount" class="fee-width"
                                  :placeholder="index === scope.row.rateList.length - 1 ? '' : '必填'"
                                  :disabled="index === scope.row.rateList.length - 1"
                                  @blur="checkAmount(rate.amount, 'VERIFY', '笔数')">
                        </el-input>
                      </el-form-item>
                    </el-col>

                    <el-col :span="11">
                      <el-form-item label="固定手续费(元)：" class="mv5">
                        <el-input v-model.trim="rate.fee" class="fee-width" placeholder="必填"
                                  @blur="checkFixed(rate.fee, 'VERIFY', '固定手续费')">
                        </el-input>
                      </el-form-item>
                    </el-col>

                    <el-col :span="3">
                      <el-button class="venter" v-if="index === 0" size="small" @click="rateIncrease(scope.row)" icon="plus">添加</el-button>
                      <el-button class="venter" v-if="index > 0" size="small" @click="rateDelete(scope.row, index)" icon="delete">删除</el-button>
                    </el-col>
                  </el-row>
                </template>
              </el-table-column>

              <el-table-column label="支持银行" prop="supportBank" align="center" min-width="250">
                <template scope="scope">
                  <el-select v-model.trim="scope.row.supportBank" multiple filterable
                             :disabled="!(scope.row.txCode > '005002')" @visible-change="editUnable(scope.row)"
                             :placeholder="scope.row.txCode > '005002' ? '请输入关键字' : ''">
                    <el-option
                      v-for="bank in banks"
                      :key="bank.bankCode"
                      :label="bank.bankName +'--'+ bank.bankCode"
                      :value="bank.bankCode">
                    </el-option>
                  </el-select>
                </template>
              </el-table-column>

              <el-table-column label="状态" prop="status" align="center" width="150">
                <template scope="scope">
                  <el-select v-model="scope.row.status">
                    <el-option label="关闭" value="0"></el-option>
                    <el-option label="启用" value="1"></el-option>
                  </el-select>
                </template>
              </el-table-column>
            </el-table>
          </div>

          <div v-show="activeName === 'GATEWAY'">
            <el-table :data="insFee.GATEWAY" border style="width: 100%">
              <el-table-column label="支持银行" prop="supportBank" align="center" min-width="250">
                <template scope="scope">
                  <el-select v-model.trim="scope.row.supportBank" multiple filterable
                             @visible-change="editUnable(scope.row)" placeholder="请输入关键字">
                    <el-option
                      v-for="bank in banks"
                      :key="bank.bankCode"
                      :label="bank.bankName +'--'+ bank.bankCode"
                      :value="bank.bankCode">
                    </el-option>
                  </el-select>
                </template>
              </el-table-column>

              <el-table-column label="交易类型" prop="txCode" align="center" width="200">
                <template scope="scope">
                  <el-input type="hidden" v-model="scope.row.txCode"></el-input>
                  <span>{{scope.row.txName}}</span>
                </template>
              </el-table-column>

              <el-table-column label="扣率类型" prop="feeType" align="center" width="200">
                <template scope="scope">
                  <el-select v-model="scope.row.feeType" @change="feeTypeChange(scope.row)">
                    <el-option label="单笔固定" value="2"></el-option>
                    <el-option label="金额阶梯固定" value="4"></el-option>
                  </el-select>
                </template>
              </el-table-column>

              <el-table-column label="扣率值" prop="feeFixedTemp" align="center" min-width="550">
                <template scope="scope">
                  <el-row v-show="!scope.row.rateList.length">
                    <el-form-item label="固定手续费(元)：" class="mb0">
                      <el-input v-model.trim="scope.row.feeFixedTemp" placeholder="必填"
                                @blur="checkFixed(scope.row.feeFixedTemp, 'GATEWAY', '固定手续费')">
                      </el-input>
                    </el-form-item>
                  </el-row>

                  <el-row :gutter="15"  v-for="(rate, index) in scope.row.rateList" :key="index">
                    <el-col :span="11">
                      <el-form-item label="金额(元)：" class="mv5">
                        <el-input v-model.trim="rate.amount"
                                  :placeholder="index === scope.row.rateList.length - 1 ? '' : '必填'"
                                  :disabled="index === scope.row.rateList.length - 1"
                                  @blur="checkFixed(rate.amount, 'GATEWAY', '金额')">
                        </el-input>
                      </el-form-item>
                    </el-col>

                    <el-col :span="10">
                      <el-form-item label="固定手续费(元)：" class="mv5">
                        <el-input v-model.trim="rate.fee" placeholder="必填" @blur="checkFixed(rate.fee, 'GATEWAY', '固定手续费')"></el-input>
                      </el-form-item>
                    </el-col>

                    <el-col :span="3">
                      <el-button class="venter" v-if="index === 0" size="small" @click="rateIncrease(scope.row)" icon="plus">添加</el-button>
                      <el-button class="venter" v-if="index > 0" size="small" @click="rateDelete(scope.row, index)" icon="delete">删除</el-button>
                    </el-col>
                  </el-row>
                </template>
              </el-table-column>

              <el-table-column label="状态" prop="status" align="center" width="200">
                <template scope="scope">
                  <el-select v-model="scope.row.status">
                    <el-option label="关闭" value="0"></el-option>
                    <el-option label="启用" value="1"></el-option>
                  </el-select>
                </template>
              </el-table-column>
            </el-table>
          </div>

          <div v-show="activeName === 'COLLECT'">
            <el-table :data="insFee.COLLECT" border style="width:100%">
              <el-table-column label="交易类型" prop="txCode" align="center">
                <template scope="scope">
                  <el-input type="hidden" v-model="scope.row.txCode"></el-input>
                  <span>{{scope.row.txName}}</span>
                </template>
              </el-table-column>

              <el-table-column label="卡类型" prop="cardType" align="center">
                <template scope="scope">
                  <el-input type="hidden" v-model="scope.row.cardType"></el-input>
                  <span>{{scope.row.cardTypeName}}</span>
                </template>
              </el-table-column>

              <el-table-column label="扣率类型" prop="feeType" align="center">
                <template scope="scope">
                  <el-select v-model="scope.row.feeType" @change="typeChange(scope.row)">
                    <el-option label="比例" value="1"></el-option>
                    <el-option label="固定值" value="2"></el-option>
                    <el-option label="比例加固定封顶" value="3"></el-option>
                  </el-select>
                </template>
              </el-table-column>

              <el-table-column label="扣率值(%)" prop="feeRateTemp" align="center">
                <template scope="scope">
                  <!--<el-row :gutter="15">-->
                  <!--<el-col>-->
                  <el-input v-model.trim="scope.row.feeRateTemp"
                            :placeholder="scope.row.feeType === '2' ? '' : '必填'"
                            :disabled="scope.row.feeType === '2'" @blur="checkRate(scope.row.feeRateTemp, 'COLLECT')">
                  </el-input>
                  <!--</el-col>-->
                  <!--</el-row>-->
                </template>
              </el-table-column>

              <el-table-column label="封顶值(元)" prop="feeFixedTemp" align="center">
                <template scope="scope">
                  <!--<el-row :gutter="15">-->
                  <!--<el-col>-->
                  <el-input v-model.trim="scope.row.feeFixedTemp"
                            :placeholder="scope.row.feeType === '1' ? '' : '必填'"
                            :disabled="scope.row.feeType === '1'" @blur="checkFixed(scope.row.feeFixedTemp, 'COLLECT', '封顶值')">
                  </el-input>
                  <!--</el-col>-->
                  <!--</el-row>-->
                </template>
              </el-table-column>

              <el-table-column label="状态" prop="status" align="center">
                <template scope="scope">
                  <el-select v-model="scope.row.status" style="text-align: center">
                    <el-option label="关闭" value="0"></el-option>
                    <el-option label="启用" value="1"></el-option>
                  </el-select>
                </template>
              </el-table-column>
            </el-table>
          </div>
        </el-tab-pane>
      </el-tabs>

      <el-row>
        <el-col>
          <el-form-item>
            <el-button @click="cancel('newIns')">取消</el-button>
            <el-button type="primary" @click="submitForm('newIns')">提交</el-button>
          </el-form-item>
        </el-col>
      </el-row>
    </el-form>
  </div>
</template>

<script>
  import ApiService from '@/services/API-servies'
  export default {
    data () {
      return {
        ins: {
          code: '',
          name: '',
          channel: '',
          bankCode: '',
        },
        insFee: {
          POSP: [],
          PAY: [],
          WECHAT_PAY: [],
          ALI_PAY: [],
          GATEWAY: [],
          VERIFY: [],
          COLLECT: []
        },
        channelList: [],
        checkedTypes: [],
        selectedPerm: [],
        checkedBanks: [],
        businessList: [],
        permList: [],
        tabName: [],
        bankList: [],
        banks: [],
        activeName: '',
        disabled: true,
        formRules: {
          code: [
            { required: true, message: '请输入通道机构编号！', trigger: 'blur'},
            { pattern: /^[1-9]\d{7,11}$/, message: '请输入首位不为0的数字(8-12位)', trigger: 'blur'}
          ],
          name: [
            { required: true, message: '请输入通道机构名称！', trigger: 'blur'},
            { pattern: /^([\u4E00-\u9FA5]|\w){0,20}$/, message: '请输入中文、字母、数字或下划线(至多20位)', trigger: 'blur'}
          ],
          channel: { required: true, message: '请选择所属通道！', trigger: 'change' }
        },
      }
    },
    mounted() {
      // 获取产品类型
      this.getProductType();
    },
    filters: {
      stringNumber(val) {
        return val.toString();
      }
    },
    methods: {
      getProductType() {
        let _this = this;
        _this.$nextTick(() => {
          // 获取产品类型信息
          ApiService.common.businessList().then(data => {
            _this.businessList = data.data;
          });

          // 获取通道列表信息
          ApiService.common.channelList().then(data => {
            _this.channelList = data.data;
          });

          // 获取银行列表信息
          ApiService.common.acquireBankList().then(data => {
            _this.bankList = data.data;
            _this.banks = data.data;
          });
        })
      },
      checkDuplicate(queryKey) {
        let _this = this;
        if(queryKey) {
          let postData = {queryKey: queryKey, source: 2, operation: '1'};

          ApiService.common.checkCode(postData).then(data => {
            if(data.code !== 0) {
              _this.$message({
                type: 'warning',
                message: data.message
              });
            }
          })
        }
      },
      editUnable(arr) {
        if(arr.supportBank.includes('88888888')) {
          arr.supportBank = ['88888888'];
        }
      },
      typeChange(row) {
        // 根据扣率类型初始化数据
        if(row.feeType === '1') {
          row.feeFixedTemp = '';
        }else if(row.feeType === '2') {
          row.feeRateTemp = '';
        }else if(row.feeType === '3') {
          row.feeRateTemp = '';
          row.feeFixedTemp = '';
        }
      },
      checkRate(val, type) {
        let pointIndex = val.indexOf('.');
        if(!val.trim()) {
          this.$message({
            type: 'warning',
            message: `[${type}]内扣率值不能为空！`
          });
          return false;
        }else {
          if(!Number(val)) {
            this.$message({
              type: 'warning',
              message: `请在[${type}]内扣率值中输入合法的数字！`
            });
            return false;
          }else if(val < 0 || val > 100) {
            this.$message({
              type: 'warning',
              message: `请在[${type}]内扣率值输入0-100的数字！`
            });
            return false;
          }else if(pointIndex !== -1 && val.slice(pointIndex + 1).length > 4) {
            this.$message({
              type: 'warning',
              message: `[${type}]内扣率值只能保留4位小数！`
            });
            return false;
          }else if(val.search(/\D/) === (val.length - 1)) {
            this.$message({
              type: 'warning',
              message: `[${type}]内扣率值末尾不能包含字母或特殊字符！`
            });
            return false;
          }else {
            return true;
          }
        }
      },
      checkFixed(val, type, msg) {
        let pointIndex = val.indexOf('.');
        if(!val.trim()) {
          this.$message({
            type: 'warning',
            message: `[${type}]内${msg}不能为空！`
          });
          return false;
        }else {
          if(!Number(val)) {
            this.$message({
              type: 'warning',
              message: `请在[${type}]内${msg}中输入合法的数字！`
            });
            return false;
          }else if(val < 0) {
            this.$message({
              type: 'warning',
              message: `请在[${type}]内${msg}输入不小于0的数字！`
            });
            return false;
          }else if(pointIndex !== -1 && val.slice(pointIndex + 1).length > 2) {
            this.$message({
              type: 'warning',
              message: `[${type}]内${msg}只能保留2位小数！`
            });
            return false;
          }else if(val.search(/\D/) === (val.length - 1)) {
            this.$message({
              type: 'warning',
              message: `[${type}]内${msg}末尾不能包含字母或特殊字符！`
            });
            return false;
          }else {
            return true;
          }
        }
      },
      checkAmount(val, type, msg) {
        if(!val.trim()) {
          this.$message({
            type: 'warning',
            message: `[${type}]内${msg}不能为空！`
          });
          return false;
        }else {
          if(val.search(/\D/) !== -1) {
            this.$message({
              type: 'warning',
              message: `请在[${type}]内${msg}中输入合法的数字！`
            });
            return false;
          }else if(val.search(/^0\d*/) !== -1) {
            this.$message({
              type: 'warning',
              message: `请在[${type}]内${msg}中输入首位不为0的整数！`
            });
            return false;
          }else {
            return true;
          }
        }
      },
      feeTypeChange(row) {
        if(row.feeType === '2') {
          row.rateList.splice(0);
        }else if(row.feeType === '4' || row.feeType === '6' || row.feeType === '8') {
          row.rateList.splice(0);
          row.rateList.push({amount: '', fee: ''});
        }
      },
      rateIncrease(row) {
        row.rateList.push({amount: '', fee: ''});
      },
      rateDelete(row, index) {
        row.rateList.splice(index, 1);
        row.rateList[row.rateList.length-1].amount = '';
      },
      selectType(event, key, index) {
        let _this = this;
        let checked = event.target.checked;

        if(checked) {
          _this.tabName.push(key);
          _this.activeName = key;
          _this.permList = _this.businessList[index].txList;

          // 默认选中无需配置费率的交易权限
          for(let i = 0, len = _this.permList.length; i < len; i++) {
            if(!_this.permList[i].needCharging) {
              _this.selectedPerm.push(_this.permList[i].code);
            }
          }
        }else {
          // 获取所取消产品类型在tab中的索引
          let tabIndex = _this.tabName.findIndex((value, index, arr) => {
            return value === key;
          });

          // 移除所取消产品类型对应的tab
          _this.tabName.splice(tabIndex, 1);

          // 移除相应tab下的费率
          _this.insFee[key].splice(0);

          // 移除相应tab下已选中的交易权限
          let currentPerm = _this.businessList[index].txList;
          for(let a = _this.selectedPerm.length - 1; a >= 0; a--) {
            for(let j = 0; j < currentPerm.length; j++) {
              if(_this.selectedPerm[a] === currentPerm[j].code) {
                _this.selectedPerm.splice(a, 1);
              }
            }
          }

          // 默认激活第一个显示的标签页
          let tabLen = _this.tabName.length;
          if(tabLen) {
            _this.activeName = _this.tabName[0];
          }

          // 显示第一个激活标签对应的交易权限
          for(let i = 0, len = _this.businessList.length; i < len; i++) {
            if(_this.businessList[i].name === _this.activeName) {
              _this.permList = _this.businessList[i].txList;
            }
          }
        }
      },
      updateData(tab, event) {
        // 切换标签时显示对应的交易权限
        let businessList = this.businessList;
        for ( let i = 0, len = businessList.length; i < len; i++ ) {
          if ( businessList[ i ].name === tab.name ) {
            this.permList = businessList[ i ].txList;
          }
        }
      },
      permChange(perm, index, event) {
        let _this = this;
        let checked = event.target.checked;

        // 判断交易类型是否选中以及是否需要配置费率
        if(checked && perm.needCharging) {
          // 根据产品类型新增费率
          let cardTypes = [{cardType: 1, cardTypeName: '借记卡'}, {cardType: 2, cardTypeName: '贷记卡'}];
          let cardList = {
            POSP: cardTypes,
            PAY: cardTypes,
            COLLECT: cardTypes
          };

          // 要素验证时，根据交易权限决定卡类型
          if(perm.code > '005002') {
            cardList.VERIFY = cardTypes;
          }

          // 根据产品类型确定默认扣率类型值
          let feeType = '';
          switch(perm.businessName) {
            case 'POSP':
            case 'COLLECT':
            case 'WECHAT_PAY':
            case 'ALI_PAY':
              feeType = '1';
              break;
            case 'PAY':
            case 'VERIFY':
            case 'GATEWAY':
              feeType = '2';
              break;
          }

          if(perm.businessName in cardList) {
            for(let i = 0; i < cardList[perm.businessName].length; i++) {
              if(perm.businessName === 'VERIFY' && perm.code < '005003') {
                _this.insFee[perm.businessName].push({
                  txCode: perm.code,
                  txName: perm.name,
                  cardType: '',
                  cardTypeName: '',
                  feeType: feeType,
                  feeRateTemp: '',
                  feeFixedTemp: '',
                  brandRate: '',
                  brandFixed: '',
                  supportBank: [],
                  rateList: [],
                  status: '1'
                });
              }else {
                _this.insFee[perm.businessName].push({
                  txCode: perm.code,
                  txName: perm.name,
                  cardType: cardList[perm.businessName][i].cardType,
                  cardTypeName: cardList[perm.businessName][i].cardTypeName,
                  feeType: feeType,
                  feeRateTemp: '',
                  feeFixedTemp: '',
                  brandRate: '',
                  brandFixed: '',
                  supportBank: [],
                  rateList: [],
                  status: '1'
                });
              }
            }
          }else {
            _this.insFee[perm.businessName].push({
              txCode: perm.code,
              txName: perm.name,
              cardType: '',
              cardTypeName: '任意',
              feeType: feeType,
              feeRateTemp: '',
              feeFixedTemp: '',
              brandRate: '',
              brandFixed: '',
              supportBank: [],
              rateList: [],
              status: '1'
            });
          }
        }else if(!checked && perm.needCharging) {
          // 移除费率
          for(let i = _this.insFee[perm.businessName].length - 1; i >= 0; i--) {
            if(_this.insFee[perm.businessName][i].txName === perm.name) {
              _this.insFee[perm.businessName].splice(i, 1);
            }
          }
        }
      },
      cancel(formName) {
        this.$refs[formName].resetFields();
        this.$router.push('/ins');
      },
      submitForm(formName) {
        let _this = this;
        // 判断通道机构编号及名称是否重复
        /*let codeStatus = _this.checkDuplicate(_this.ins.code);
         let nameStatus = _this.checkDuplicate(_this.ins.name);
         if(!codeStatus || !nameStatus) {
         return false;
         }*/

        _this.$refs[formName].validate(valid => {
          // 判断是否选择产品类型
          let proTypeLength = _this.checkedTypes.length;
          if(!proTypeLength) {
            _this.$message({
              type: 'warning',
              message: '请至少选择一种产品类型！'
            });
            return false;
          }else {
            for(let i = 0, len = _this.checkedTypes.length; i < len; i++) {
              for(let key in _this.insFee) {
                if(_this.checkedTypes[i] === key && !_this.insFee[key].length) {
                  _this.$message({
                    type: 'warning',
                    message: `[${key}]内至少选择一种可配置费率的交易权限！`
                  });
                  return false;
                }
              }
            }
          }

          // 判断posp是否配置费率
          if(!_this.insFee.POSP.length) {
            _this.ins.bankCode = ''
          }else if(_this.insFee.POSP.length && !_this.ins.bankCode) {
            _this.$message({
              type: 'warning',
              message: '请选择收单银行！'
            });

            return false;
          }else {
            for(let i = 0, len = _this.checkedTypes.length; i < len; i++) {
              for(let key in _this.insFee) {
                if(_this.checkedTypes[i] === key && !_this.insFee[key].length) {
                  _this.$message({
                    type: 'warning',
                    message: `[${key}]内至少选择一种可配置费率的交易权限！`
                  });

                  return false;
                }
              }
            }
          }

          // 费率
          let insFeeTemplate = [];
          for(let key in _this.insFee) {
            for(let i = 0, len = _this.insFee[key].length; i < len; i++) {
              // 清空上一行费率的支持银行code
              let insTxAbility = [];
              if(_this.insFee[key][i].supportBank) {
                for(let j = 0, leng = _this.insFee[key][i].supportBank.length; j < leng; j++) {
                  insTxAbility.push({
                    bankCode: _this.insFee[key][i].supportBank[j]
                  });
                }
              }

              // 验证费率下必填项
              let length = _this.insFee[key].length;
              if(length) {
                switch(key) {
                  case 'POSP':
                  case 'COLLECT':
                    switch(_this.insFee[key][i].feeType) {
                      case '1':
                        let rateStatus = _this.checkRate(_this.insFee[key][i].feeRateTemp, key);
                        if(!rateStatus) {
                          return false;
                        }
                        break;
                      case '2':
                        let fixedStatus = _this.checkFixed(_this.insFee[key][i].feeFixedTemp, key, '封顶值');
                        if(!fixedStatus) {
                          return false;
                        }
                        break;
                      case '3':
                        let rateTempStatus = _this.checkRate(_this.insFee[key][i].feeRateTemp, key);
                        let fixedTempStatus = _this.checkFixed(_this.insFee[key][i].feeFixedTemp, key, '封顶值');
                        if(!rateTempStatus || !fixedTempStatus) {
                          return false;
                        }
                        break;
                    }
                    break;
                  case 'WECHAT_PAY':
                  case 'ALI_PAY':
                    let rateStatus = _this.checkRate(_this.insFee[key][i].feeRateTemp, key);
                    if(!rateStatus) {
                      return false;
                    }
                    break;
                  case 'PAY':
                  case 'VERIFY':
                  case 'GATEWAY':
                    if(key === 'VERIFY') {
                      if(_this.insFee[key][i].txCode > '005002' && !_this.insFee[key][i].supportBank.length) {
                        _this.$message({
                          type: 'warning',
                          message: `[${key}]内支持银行不能为空！`
                        });
                        return false;
                      }
                    }else {
                      if(!_this.insFee[key][i].supportBank.length) {
                        _this.$message({
                          type: 'warning',
                          message: `[${key}]内支持银行不能为空！`
                        });
                        return false;
                      }
                    }


                    switch(_this.insFee[key][i].feeType) {
                      case '2':
                        let fixedStatus = _this.checkFixed(_this.insFee[key][i].feeFixedTemp, key, '固定手续费');
                        if(!fixedStatus) {
                          return false;
                        }
                        break;
                      case '4':
                      case '6':
                      case '8':
                        for(let j = 0, leng = _this.insFee[key][i].rateList.length; j < leng; j++) {
                          if(leng === 1) {
                            let feeStatus = _this.checkFixed(_this.insFee[key][i].rateList[j].fee, key, '固定手续费');
                            if(!feeStatus) {
                              return false;
                            }
                          }else if(leng > 1) {
                            // 验证金额/笔数
                            if(j < _this.insFee[key][i].rateList.length - 1) {
                              let msg = _this.insFee[key][i].feeType === '4'? '金额' : '笔数';

                              if(j > 0 && ((_this.insFee[key][i].rateList[j-1].amount * 1) >= (_this.insFee[key][i].rateList[j].amount * 1))) {
                                _this.$message({
                                  type: 'warning',
                                  message: `[${key}]内的${msg}值必须呈递增状态（不得小于前一项的值）`
                                });
                                return false;
                              }else if(_this.insFee[key][i].feeType === '4') {
                                let amountStatus = _this.checkFixed(_this.insFee[key][i].rateList[j].amount, key, '金额');

                                if(!amountStatus) {
                                  return false;
                                }
                              }else {
                                let numStatus = _this.checkAmount(_this.insFee[key][i].rateList[j].amount, key, '笔数');

                                if(!numStatus) {
                                  return false;
                                }
                              }
                            }

                            // 验证固定手续费
                            if(j < _this.insFee[key][i].rateList.length) {
                              let feeStatus = _this.checkFixed(_this.insFee[key][i].rateList[j].fee, key, '固定手续费');
                              if(!feeStatus) {
                                return false;
                              }

                              /*if(j > 0 && ((_this.insFee[key][i].rateList[j-1].fee * 1) >= (_this.insFee[key][i].rateList[j].fee * 1))) {
                               _this.$message({
                               type: 'warning',
                               message: `[${key}]内的固定手续费必须呈递增状态（不得小于前一项的值）`
                               });
                               return false;
                               }*/
                            }
                          }
                        }
                        break;
                    }

                    if(key === 'PAY' && _this.insFee[key][i].cardType > 1) {
                      let rateStatus = _this.checkRate(_this.insFee[key][i].brandRate, key);
                      let feeStatus = _this.checkFixed(_this.insFee[key][i].brandFixed, key, '封顶值');
                      if(!rateStatus || !feeStatus) {
                        return false;
                      }
                    }
                    break;
                }
              }

              // 组织扣率值
              let rateTemp = '';
              switch(key) {
                case 'POSP':
                case 'COLLECT':
                  rateTemp = _this.insFee[key][i].feeFixedTemp;
                  break;
                case 'PAY':
                case 'VERIFY':
                case 'GATEWAY':
                  // 判断扣率类型以组织扣率值
                  if(_this.insFee[key][i].feeType === '2') {
                    rateTemp = _this.insFee[key][i].feeFixedTemp;
                  }else {
                    let amount = '';
                    let fee = '';
                    let feeList = _this.insFee[key][i].rateList;

                    // 判断扣率值的长度
                    if(feeList.length && feeList.length > 1) {
                      for(let i = 0, len = feeList.length; i < len; i++) {
                        amount += feeList[i].amount + ',';
                        fee += feeList[i].fee + ',';
                      }

                      amount = amount.slice(0, amount.length - 2);
                      fee = fee.slice(0, fee.length - 1);
                      rateTemp = amount +';'+ fee;
                    }else if(feeList.length && feeList.length === 1) {
                      rateTemp = feeList[0].amount +';'+ feeList[0].fee;
                    }
                  }
                  break;
              }

              // 费率模板
              let brandFee = _this.insFee[key][i].brandFixed ? _this.insFee[key][i].brandRate +','+ _this.insFee[key][i].brandFixed : '';
              insFeeTemplate.push({
                txCode: _this.insFee[key][i].txCode,
                cardType: _this.insFee[key][i].cardType,
                feeType: _this.insFee[key][i].feeType,
                feeRateTemp: _this.insFee[key][i].feeRateTemp,
                feeFixedTemp: rateTemp,
                brandFeeExp: brandFee,
                status: _this.insFee[key][i].status,
                insTxAbilityList: insTxAbility
              });
            }
          }

          // 交易类型code
          let businessList = [];
          for(let i = 0, len = _this.selectedPerm.length; i < len; i++) {
            businessList.push({
              txList: [
                { code: _this.selectedPerm[i] }
              ]
            });
          }

          // 组织提交数据
          let postData = {
            ins: {
              code: _this.ins.code,
              name: _this.ins.name,
              channelId: _this.ins.channel,
              bankCode: _this.ins.bankCode
            },
            insFeeTemplate: insFeeTemplate,
            businessList: businessList
          };

          if(valid) {
            ApiService.ins.add(postData).then(data => {
              if(data.code === 0) {
                _this.$message({
                  type: 'success',
                  message: '通道机构新增成功！',
                  duration: 200,
                  onClose() {
                    _this.$router.push({path: '/ins'});
                  }
                });
              }else {
                _this.$message({
                  type: 'warning',
                  message: data.message
                });

                return false;
              }
            });
          }
        })
      }
    }
  }
</script>

<style lang="less" scoped>

</style>
